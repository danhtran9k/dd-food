import { NEXT_API } from '@app/api-next/_core/api-endpoint/api-next.endpoint'
import {
  AUTHENTICATION_ERROR_STATUS,
  ENTITY_ERROR_STATUS,
  EntityError,
  EntityErrorPayload,
  HttpError
} from '@app/api-next/_core/api-error.type'
import {
  getLocalAccessToken,
  removeLocalStorageToken,
  setLocalStorageAccessToken,
  setLocalTokenRefreshExpired
} from '@app/api-next/_core/token.helper'

import { LoginResType } from '@app/api-next/auth/auth.dto'

import { ROUTE_PATH } from '@core/path.const'
import { normalizePath } from '@core/utils'

import { getHttpRequestInfo, mergeFetchOptions } from './http.common'
import { THttpMethod, THttpPayload } from './http.type'

// √Ω t∆∞·ªüng nh∆∞ ki·ªÉu useRef, ƒë·ªÉ track khi logout ƒëang g·ªçi, -> ko g·ªçi th√™m
let clientLogoutRequest: null | Promise<any> = null

// private request, client only
export const httpClient = async <Response>(
  method: THttpMethod,
  url: string,
  req?: THttpPayload
) => {
  const { bodyPayload, fullUrl, baseHeaders } = getHttpRequestInfo(url, req)

  const accessToken = getLocalAccessToken()
  if (accessToken) {
    baseHeaders.Authorization = `Bearer ${accessToken}`
  }

  const res = await fetch(
    fullUrl,
    mergeFetchOptions({
      options: req?.options,
      baseHeaders,
      body: bodyPayload,
      method
    })
  )

  const payload: Response = await res.json()
  const data = {
    status: res.status,
    payload
  }

  if (!res.ok) {
    if (res.status === ENTITY_ERROR_STATUS) {
      throw new EntityError(
        data as {
          status: 422
          payload: EntityErrorPayload
        }
      )
      // handle force logout ngay trong http gi·ªëng nh∆∞ 1 ki·ªÉu interceptor
    } else if (res.status === AUTHENTICATION_ERROR_STATUS) {
      // c√≥ 2 case thi api logout tu·ª≥ thu·ªôc n∆°i g·ªçi m√† s·∫Ω h·ª©ng set-Cookie
      // N·∫øu t·ª´ sv g·ªçi ti·∫øp th√¨ li·ªáu c√≥ forward set-Cookie ƒë∆∞·ª£c kh√¥ng?

      // client g·ªçi tr·ª±c ti·∫øp v√†o sv BE -> middleware g·ªçi ng·∫ßm sv FE
      // force logout ·ªü client -> check comment trong api Next server client
      // copy dup code ·ªü ƒë√¢y v√¨ ko mu·ªën circular, h∆°i d·ªü
      clientLogoutRequest = fetch(NEXT_API.AUTH.LOGOUT.api(), {
        method: 'POST',
        body: null, //assume logout lu√¥n th√†nh c√¥ng ?!, c≈©ng t·∫°m, n·∫øu AT c√≥ tr√™n db th√¨ t·ª©c l√† AT ƒë√≥ ƒë√£ valid s·∫µn, vi·ªác ng∆∞·ªùi d√πng l·ªô AT ho·∫∑c b·ªã force th√¨ ch·∫•p nh·∫≠n ??
        headers: {
          ...baseHeaders
        }
      })
      try {
        await clientLogoutRequest
      } catch (error) {
        console.log('üöÄ http L106-error', error)
      } finally {
        removeLocalStorageToken()
        // reset flag
        clientLogoutRequest = null

        // Redirect v·ªÅ login c√≥ th·ªÉ loop v√¥ h·∫°n
        // Login page ƒë√£ b·ªã x√≥a token tr∆∞·ªõc ƒë√≥ -> loop
        location.href = ROUTE_PATH.LOGIN
      }
    } else {
      // Ch·ªó n√†y c·∫ßn BE handle code chu·∫©n, hi·ªán ch·ªâ handle 422 zod
      throw new HttpError(data)
    }
  }

  // Cheat interceptor, t·∫°m ch·∫•p nh·∫≠n, ti·ªán set cookie v√†o obj clientSessionToken
  const normalizeUrl = normalizePath(url)
  if (normalizeUrl === normalizePath(NEXT_API.AUTH.LOGIN.api())) {
    const { accessToken, refreshToken } = (payload as LoginResType).data
    setLocalStorageAccessToken(accessToken)
    setLocalTokenRefreshExpired(refreshToken)
  } else if (normalizeUrl === normalizePath(NEXT_API.AUTH.LOGOUT.api())) {
    removeLocalStorageToken()
  }

  return data
}
