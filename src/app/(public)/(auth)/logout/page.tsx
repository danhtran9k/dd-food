'use client'

import { useRouter } from 'next/navigation'
import { Suspense, useEffect, useRef } from 'react'

import { useIsParamTokenMatch } from '@core/app-hook/use-is-param-token-match.hook'
import { useAuthContext } from '@core/app-provider/auth-provider'
import { ROUTE_PATH } from '@core/path.const'
import { getUrlWithParams } from '@core/utils'

import { useLogoutMutation } from '@app/api-next/auth/logout/use-logout-mutate.hook'

function ProxyComponentLogout() {
  // B·∫Øt bu·ªôc ph·∫£i destruct tra ch·ª© ko ƒëu·ªçc mutate.mutateAsync
  // obj mutate l·ªõn b·ªã thay ƒë·ªïi v√† d√πng trong eff dep g√¢y loop
  const { mutateAsync } = useLogoutMutation()
  const { setIsAuth } = useAuthContext()
  const router = useRouter()

  // D√πng 1 ref ng·∫ßm + timeOut ƒë·ªÉ n√© React strict mode, de-duplicate request
  // Solution t·∫°m, v√¨ abort Controller ch·ªâ cancel ·ªü FE
  // TRADE-OFF
  const ref = useRef<unknown>(null)

  const { checkTokenParamMatch } = useIsParamTokenMatch()
  useEffect(() => {
    const { hasAndMatchAccessToken } = checkTokenParamMatch()
    // D√πng DK tho·∫£ if cho ƒë∆°n gi·∫£n, v√¨ logic check undefined h∆°i r·ªông
    // V√¨ route n√†y ch·ªâ ch·∫°y khi ƒë∆∞·ª£c Next proxy v√†o k√®m token
    // Check match tr√°nh vi·ªác b·ªã v√†o ng·∫´u nhi√™n
    const url = getUrlWithParams(ROUTE_PATH.LOGIN, { navBy: 'logout-page' })

    // V·ªõi case c√≤n RT ban ƒë·∫ßu trong middleware
    // Guard l·∫°i b·∫±ng c√°ch ƒë·∫©y qua PROXY PAGE renew / refresh token
    // S·∫Ω ko c√≥ logic check refreshToken ·ªü ƒë√¢y
    if (!ref.current && hasAndMatchAccessToken) {
      ref.current = mutateAsync

      // TODO: debug t·∫°i sao mutate ko ch·∫°y m√† ph·∫£i d√πng mutateAsync
      // mutate(undefined, {
      //   onSuccess: () => {
      //     console.count('üöÄüöÄ mutate success')
      //     // Vi·∫øt d·∫°ng mutate async th√¨ ph·∫£i ƒë∆∞a v√†o trong .then(res => {...})
      //     setTimeout(() => {
      //       ref.current = null
      //     }, 1000)

      //     // B·∫Øt bu·ªôc ƒë·ªÉ cu·ªëi
      //     setIsAuth(false)
      //     router.push(url)
      //   }
      // })

      // D√πng mutate nh∆∞ tr√™n l·∫°i ko redirect v·ªÅ login dc
      mutateAsync().then(() => {
        setTimeout(() => {
          ref.current = null
        }, 1000)
        setIsAuth(false)
        router.push(url)
      })
    } else {
      // N·∫øu kh√¥ng match token, redirect v·ªÅ login
      router.push(
        getUrlWithParams(ROUTE_PATH.ROOT, { debug: 'logout-PAGE-PROXY-fail' })
      )
    }
  }, [checkTokenParamMatch, mutateAsync, router, setIsAuth])
  return <div>Log out....</div>
}

export default function LogoutPage() {
  return (
    <Suspense>
      <ProxyComponentLogout />
    </Suspense>
  )
}
